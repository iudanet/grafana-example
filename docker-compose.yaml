---
version: "3"

networks:
  loki:
volumes:
  grafana_pg_data:
  prometheus_data:
services:
  loki:
    restart: unless-stopped
    image: grafana/loki:2.7.1
    command: "-config.file=/etc/loki/config.yaml"
    ports:
      - 127.1.1.1:3100:3100
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          wget --no-verbose --tries=1
          --spider http://localhost:3100/ready
          || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      loki:
        aliases:
          - loki

  promtail:
    restart: unless-stopped
    image: grafana/promtail:2.7.1
    volumes:
      - ./promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    networks:
      - loki

  minio:
    restart: unless-stopped
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data  --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 127.1.1.1:9001:9001
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki

  grafana:
    restart: unless-stopped
    image: grafana/grafana:latest
    env_file:
      - ./grafana/grafana_config.env
    depends_on:
      - loki
      - postgres
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/dc.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
          - name: Prometheus
            type: prometheus
            access: proxy
            # orgId: 1
            url: http://prometheus:9090
            isDefault: true
        EOF
        /run.sh
    ports:
      - "127.1.1.1:3000:3000"
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          wget --no-verbose --tries=1
          --spider http://localhost:3000/api/health
          || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki
  postgres:
    restart: unless-stopped
    image: postgres:15.1
    environment:
      POSTGRES_USER: grafana_user
      POSTGRES_PASSWORD: Grafana_Passwd
      POSTGRES_DB: grafana_db
    volumes:
      - grafana_pg_data:/var/lib/postgresql/data/
    networks:
      - loki

  prometheus:
    restart: unless-stopped
    ports:
      - 127.1.1.1:9090:9090
    networks:
      - loki
    image: prom/prometheus:v2.41.0
    command:
      - '--config.file=/etc/prometheus/config/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus:/etc/prometheus/config/

  nodeexporter:
    networks:
      - loki
    image: prom/node-exporter:v1.5.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  cadvisor:
    networks:
      - loki
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      # - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped

  missing-container-metrics:
    networks:
      - loki
    image: ghcr.io/cablespaghetti/missing-container-metrics:0.22.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: --containerd=false
    restart: unless-stopped

# read:
  #   restart: unless-stopped
  #   image: grafana/loki:2.7.1
  #   command: "-config.file=/etc/loki/config.yaml -target=read"
  #   # ports:
  #   #   - 3101:3100
  #   #   - 7946
  #   #   - 9095
  #   volumes:
  #     - ./loki/loki-config.yaml:/etc/loki/config.yaml
  #   depends_on:
  #     - minio
  #   healthcheck:
  #     test:
  #       - "CMD-SHELL"
  #       - >
  #         wget --no-verbose --tries=1
  #         --spider http://localhost:3100/ready
  #         || exit 1
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks: &loki-dns
  #     loki:
  #       aliases:
  #         - loki

  # write:
  #   scale: 3
  #   restart: unless-stopped
  #   image: grafana/loki:2.7.1
  #   command: "-config.file=/etc/loki/config.yaml -target=write"
  #   volumes:
  #     - ./loki/loki-config.yaml:/etc/loki/config.yaml
  #   healthcheck:
  #     test:
  #       - "CMD-SHELL"
  #       - >
  #         "wget --no-verbose
  #         --tries=1 --spider http://localhost:3100/ready
  #         || exit 1"
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   depends_on:
  #     - minio
  #   networks:
  #     <<: *loki-dns
  # gateway:
  #   restart: unless-stopped
  #   image: nginx:latest
  #   depends_on:
  #     - read
  #     - write
  #   entrypoint:
  #     - sh
  #     - -euc
  #     - |
  #       cat <<EOF > /etc/nginx/nginx.conf
  #       user  nginx;
  #       worker_processes  5;  ## Default: 1
  #       events {
  #         worker_connections   1000;
  #       }
  #       http {
  #         resolver 127.0.0.11;
  #         server {
  #           listen             3100;
  #           location = / {
  #             return 200 'OK';
  #             auth_basic off;
  #           }
  #           location = /api/prom/push {
  #             proxy_pass       http://write:3100\$$request_uri;
  #           }
  #           location = /api/prom/tail {
  #             proxy_pass       http://read:3100\$$request_uri;
  #             proxy_set_header Upgrade \$$http_upgrade;
  #             proxy_set_header Connection "upgrade";
  #           }
  #           location ~ /api/prom/.* {
  #             proxy_pass       http://read:3100\$$request_uri;
  #           }
  #           location = /loki/api/v1/push {
  #             proxy_pass       http://write:3100\$$request_uri;
  #           }
  #           location = /loki/api/v1/tail {
  #             proxy_pass       http://read:3100\$$request_uri;
  #             proxy_set_header Upgrade \$$http_upgrade;
  #             proxy_set_header Connection "upgrade";
  #           }
  #           location ~ /loki/api/.* {
  #             proxy_pass       http://read:3100\$$request_uri;
  #           }
  #         }
  #       }
  #       EOF
  #       /docker-entrypoint.sh nginx -g "daemon off;"
    # ports:
    #   - "127.1.1.1:3100:3100"
    # healthcheck:
    #   test: ["CMD", "service", "nginx", "status"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # networks:
    #   - loki
